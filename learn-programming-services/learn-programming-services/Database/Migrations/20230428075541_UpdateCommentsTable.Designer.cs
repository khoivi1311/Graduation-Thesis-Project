// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using learn_programming_services.Database;

#nullable disable

namespace learn_programming_services.Database.Migrations
{
    [DbContext(typeof(LearnProgrammingContext))]
    [Migration("20230428075541_UpdateCommentsTable")]
    partial class UpdateCommentsTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("learn_programming_services.Database.Entity.Chapters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.CourseCommentActions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseCommentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDisliked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseCommentActions");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.CourseComments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseComments");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.CourseLevels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("CourseLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 4, 4, 11, 20, 5, 0, DateTimeKind.Unspecified),
                            Name = "Basic knowledge",
                            UpdateDate = new DateTime(2023, 4, 4, 11, 20, 5, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 4, 4, 11, 20, 5, 0, DateTimeKind.Unspecified),
                            Name = "General knowledge",
                            UpdateDate = new DateTime(2023, 4, 4, 11, 20, 5, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 4, 4, 11, 20, 5, 0, DateTimeKind.Unspecified),
                            Name = "Specialized knowledge",
                            UpdateDate = new DateTime(2023, 4, 4, 11, 20, 5, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.CourseReplyCommentActions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseReplyCommentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDisliked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseReplyCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseReplyCommentActions");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.CourseReplyComments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CourseCommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CourseCommentId");

                    b.ToTable("CourseReplyComments");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.Courses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CourseLevelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Objective")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CourseLevelId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.LessonCommentActions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsDisliked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LessonCommentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("LessonCommentActions");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.LessonComments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonComments");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.LessonHistories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("CodeLanguage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CodeSubmitted")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TestCase")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonHistories");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.LessonReplyCommentActions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsDisliked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LessonReplyCommentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonReplyCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("LessonReplyCommentActions");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.LessonReplyComments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LessonCommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("LessonCommentId");

                    b.ToTable("LessonReplyComments");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.Lessons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("CodeSample")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ChapterId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.LessonTestCases", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExpectedOutput")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Input")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonTestCases");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.Permissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 4, 4, 11, 20, 5, 0, DateTimeKind.Unspecified),
                            Name = "USER MANAGEMENT",
                            UpdateDate = new DateTime(2023, 4, 4, 11, 20, 5, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 4, 4, 11, 20, 5, 0, DateTimeKind.Unspecified),
                            Name = "POST COURSE",
                            UpdateDate = new DateTime(2023, 4, 4, 11, 20, 5, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 4, 4, 11, 20, 5, 0, DateTimeKind.Unspecified),
                            Name = "CREATE EXAMINATION",
                            UpdateDate = new DateTime(2023, 4, 4, 11, 20, 5, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2023, 4, 4, 11, 20, 5, 0, DateTimeKind.Unspecified),
                            Name = "POST PRACTICE",
                            UpdateDate = new DateTime(2023, 4, 4, 11, 20, 5, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2023, 4, 4, 11, 20, 5, 0, DateTimeKind.Unspecified),
                            Name = "LEARNING",
                            UpdateDate = new DateTime(2023, 4, 4, 11, 20, 5, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2023, 4, 4, 11, 20, 5, 0, DateTimeKind.Unspecified),
                            Name = "TAKE EXAMINATION",
                            UpdateDate = new DateTime(2023, 4, 4, 11, 20, 5, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 4, 4, 11, 20, 5, 0, DateTimeKind.Unspecified),
                            Name = "ADMIN",
                            UpdateDate = new DateTime(2023, 4, 4, 11, 20, 5, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 4, 4, 11, 20, 5, 0, DateTimeKind.Unspecified),
                            Name = "AUTHOR",
                            UpdateDate = new DateTime(2023, 4, 4, 11, 20, 5, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 4, 4, 11, 20, 5, 0, DateTimeKind.Unspecified),
                            Name = "STUDENT",
                            UpdateDate = new DateTime(2023, 4, 4, 11, 20, 5, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.UserLearnedLessons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("CourseId");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLearnedLessons");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.UserPermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.UserStudyCourses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("UserStudyCourses");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.UserTokens", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.Chapters", b =>
                {
                    b.HasOne("learn_programming_services.Database.Entity.Courses", "Course")
                        .WithMany("Chapters")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.CourseCommentActions", b =>
                {
                    b.HasOne("learn_programming_services.Database.Entity.CourseComments", "CourseComment")
                        .WithMany("CourseCommentActions")
                        .HasForeignKey("CourseCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("learn_programming_services.Database.Entity.Users", "User")
                        .WithMany("CourseCommentActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.CourseComments", b =>
                {
                    b.HasOne("learn_programming_services.Database.Entity.Users", "Author")
                        .WithMany("CourseComments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("learn_programming_services.Database.Entity.Courses", "Course")
                        .WithMany("CourseComments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.CourseReplyCommentActions", b =>
                {
                    b.HasOne("learn_programming_services.Database.Entity.CourseReplyComments", "CourseReplyComment")
                        .WithMany("CourseReplyCommentActions")
                        .HasForeignKey("CourseReplyCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("learn_programming_services.Database.Entity.Users", "User")
                        .WithMany("CourseReplyCommentActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseReplyComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.CourseReplyComments", b =>
                {
                    b.HasOne("learn_programming_services.Database.Entity.Users", "Author")
                        .WithMany("CourseReplyComments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("learn_programming_services.Database.Entity.CourseComments", "CourseComment")
                        .WithMany("CourseReplyComments")
                        .HasForeignKey("CourseCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("CourseComment");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.Courses", b =>
                {
                    b.HasOne("learn_programming_services.Database.Entity.Users", "Author")
                        .WithMany("Courses")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("learn_programming_services.Database.Entity.CourseLevels", "CourseLevel")
                        .WithMany("Courses")
                        .HasForeignKey("CourseLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("CourseLevel");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.LessonCommentActions", b =>
                {
                    b.HasOne("learn_programming_services.Database.Entity.LessonComments", "LessonComment")
                        .WithMany("LessonCommentActions")
                        .HasForeignKey("LessonCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("learn_programming_services.Database.Entity.Users", "User")
                        .WithMany("LessonCommentActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LessonComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.LessonComments", b =>
                {
                    b.HasOne("learn_programming_services.Database.Entity.Users", "Author")
                        .WithMany("LessonComments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("learn_programming_services.Database.Entity.Lessons", "Lesson")
                        .WithMany("LessonComments")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.LessonHistories", b =>
                {
                    b.HasOne("learn_programming_services.Database.Entity.Users", "Author")
                        .WithMany("LessonHistories")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("learn_programming_services.Database.Entity.Lessons", "Lesson")
                        .WithMany("LessonHistories")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.LessonReplyCommentActions", b =>
                {
                    b.HasOne("learn_programming_services.Database.Entity.LessonReplyComments", "LessonReplyComment")
                        .WithMany("LessonReplyCommentActions")
                        .HasForeignKey("LessonReplyCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("learn_programming_services.Database.Entity.Users", "User")
                        .WithMany("LessonReplyCommentActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LessonReplyComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.LessonReplyComments", b =>
                {
                    b.HasOne("learn_programming_services.Database.Entity.Users", "Author")
                        .WithMany("LessonReplyComments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("learn_programming_services.Database.Entity.LessonComments", "LessonComment")
                        .WithMany("LessonReplyComments")
                        .HasForeignKey("LessonCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("LessonComment");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.Lessons", b =>
                {
                    b.HasOne("learn_programming_services.Database.Entity.Users", "Author")
                        .WithMany("Lessons")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("learn_programming_services.Database.Entity.Chapters", "Chapter")
                        .WithMany("Lessons")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.LessonTestCases", b =>
                {
                    b.HasOne("learn_programming_services.Database.Entity.Lessons", "Lesson")
                        .WithMany("LessonsTestCases")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.UserLearnedLessons", b =>
                {
                    b.HasOne("learn_programming_services.Database.Entity.Chapters", "Chapter")
                        .WithMany("UserLearnedLessons")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("learn_programming_services.Database.Entity.Courses", "Course")
                        .WithMany("UserLearnedLessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("learn_programming_services.Database.Entity.Lessons", "Lesson")
                        .WithMany("UserLearnedLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("learn_programming_services.Database.Entity.Users", "User")
                        .WithMany("UserLearnedLessons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("Course");

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.UserPermissions", b =>
                {
                    b.HasOne("learn_programming_services.Database.Entity.Permissions", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("learn_programming_services.Database.Entity.Users", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.Users", b =>
                {
                    b.HasOne("learn_programming_services.Database.Entity.Roles", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.UserStudyCourses", b =>
                {
                    b.HasOne("learn_programming_services.Database.Entity.Courses", "Course")
                        .WithMany("UserStudyCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("learn_programming_services.Database.Entity.Users", "User")
                        .WithMany("UserStudyCourses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.UserTokens", b =>
                {
                    b.HasOne("learn_programming_services.Database.Entity.Users", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.Chapters", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("UserLearnedLessons");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.CourseComments", b =>
                {
                    b.Navigation("CourseCommentActions");

                    b.Navigation("CourseReplyComments");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.CourseLevels", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.CourseReplyComments", b =>
                {
                    b.Navigation("CourseReplyCommentActions");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.Courses", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("CourseComments");

                    b.Navigation("UserLearnedLessons");

                    b.Navigation("UserStudyCourses");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.LessonComments", b =>
                {
                    b.Navigation("LessonCommentActions");

                    b.Navigation("LessonReplyComments");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.LessonReplyComments", b =>
                {
                    b.Navigation("LessonReplyCommentActions");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.Lessons", b =>
                {
                    b.Navigation("LessonComments");

                    b.Navigation("LessonHistories");

                    b.Navigation("LessonsTestCases");

                    b.Navigation("UserLearnedLessons");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.Permissions", b =>
                {
                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.Roles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("learn_programming_services.Database.Entity.Users", b =>
                {
                    b.Navigation("CourseCommentActions");

                    b.Navigation("CourseComments");

                    b.Navigation("CourseReplyCommentActions");

                    b.Navigation("CourseReplyComments");

                    b.Navigation("Courses");

                    b.Navigation("LessonCommentActions");

                    b.Navigation("LessonComments");

                    b.Navigation("LessonHistories");

                    b.Navigation("LessonReplyCommentActions");

                    b.Navigation("LessonReplyComments");

                    b.Navigation("Lessons");

                    b.Navigation("UserLearnedLessons");

                    b.Navigation("UserPermissions");

                    b.Navigation("UserStudyCourses");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
